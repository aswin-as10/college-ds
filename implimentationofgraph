#include<stdio.h>
#define max 6
void bfs(int adj[max][max],int visited[],int start);
void dfs(int adj[max][max],int visited[max],int start);
int main(){
    int adj[max][max],visited[max]={0},ch,i,j;
    while(1){  
    printf("\n1.adj\n2.bfs\n3.dfs\n4.exit");
    printf("\nenter your choice:");
    scanf("%d",&ch);
    switch(ch){
        case 1:
           printf("\nenter the adjacency matrix:");
           for(i=0;i<max;i++){
               for(j=0;j<max;j++){
                  scanf("%d",&adj[i][j]);
               }
           }
           printf("\nThe adjacency matrix is \n");
        for (i = 0; i < max; i++) {
            for (j = 0; j < max; j++) {
        printf("\t%d", adj[i][j]);
    }
    printf("\n");
}

                 break;
            
        case 2:printf("\nbfs traversal");
            bfs(adj,visited,0);
            break;
        case 3:
        printf("\ndfs traversal");
        dfs(adj,visited,0);
        break;
           
        default:
           printf("\ninvalid choice");
           return 0;
      }
    }
}
void bfs(int adj[][max],int visited[],int start){
    int queue[max],rear=-1,front=-1;
    for(int k=0;k<max;k++){
        visited[k]=0;
    }
queue[++rear]=start;
++front;
visited[start]=1;
while(rear>=front){
    start=queue[front++];
    printf("%c-",start +65);
    for(int i=0;i<max;i++){
           if(adj[start][i]&&visited[i]==0){
               queue[++rear]=i;
               visited[i]=1;
           }
    }
  }
}
void dfs(int adj[max][max],int visited[max],int start ){
    int stack[max];
    int top=-1,i,k;
    for(k=0;k<max;k++){
        visited[k]=0;
    }
    top++;
    stack[top]=start;
    visited[start]=1;
    while(top!=-1){
       start=stack[top];
       top--;
       printf("%c-",start +65);
       for(i=0;i<max;i++){
       if(adj[start][i]&&visited[i]==0){
            stack[++top]=i;
            visited[i]=1;
       }
       }
    }
}
